@page "/recipes/new"
@inject HttpClient Http
@inject NavigationManager Navigation
@using HabitTracker.Domain.Entities.Recipes

<h1 class="mb-4">Add a New Recipe</h1>

<EditForm Model="@recipe" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">🍽️ Title</label>
        <InputText class="form-control" @bind-Value="recipe.Title" />
    </div>

    <div class="mb-3">
        <label class="form-label">🧂 Ingredients (comma-separated)</label>
        <InputText class="form-control" @bind-Value="ingredientsText" />
    </div>

    <div class="mb-3">
        <label class="form-label">📋 Instructions</label>
        <InputTextArea class="form-control" @bind-Value="recipe.Instructions" />
    </div>

    <div class="mb-3">
        <label class="form-label">🏷️ Tags (comma-separated)</label>
        <InputText class="form-control" @bind-Value="tagsText" />
    </div>

    <button type="submit" class="btn btn-success">➕ Add Recipe</button>
</EditForm>

@code {
    private Recipe recipe = new();
    private string ingredientsText = "";
    private string tagsText = "";


    private async Task HandleValidSubmit()
    {
        recipe.Ingredients = ingredientsText
            .Split(',', StringSplitOptions.RemoveEmptyEntries)
            .Select(i => i.Trim())
            .ToList();

        recipe.Tags = tagsText
            .Split(',', StringSplitOptions.RemoveEmptyEntries)
            .Select(t => t.Trim())
            .ToList();

        var response = await Http.PostAsJsonAsync("api/recipe", recipe);
        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("✅ Recipe added!");
            Navigation.NavigateTo("/recipes");
        }
        else
        {
            Console.Error.WriteLine("❌ Failed to create recipe");
        }
    }
}
